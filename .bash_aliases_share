#!/usr/bin/bash
# 服务器、笔记本、WSL 共享的alias配置
echo .bash_aliases_share

# ---------------- alias to resource ----------------
alias nvd='watch -n 0.1 nvidia-smi' # 查GPU使用
alias gpu='watch -n 0.1 gpustat'    # 查看GPU使用，谁在用
alias gpujc='nvidia-who'            # 看用哪个进程在用显卡

# 用法
# `gpuid 0 python xxx.py` 现在暂时用GPU0运行 xxx.py
# `gpuid 0` 并不能使得接下来一直默认用GPU0运行各个程序
gpuid()
{
    eval "CUDA_VISIBLE_DEVICES=$*"
}

alias mem='free -h'  # 查内存使用
alias yp-a='df -h' # 查看所有硬盘使用
alias yp='df -h' # 查看当前目录所在硬盘使用

alias cuda-v='nvcc -V'      # 查看cuda版本

alias xt='lsb_release -a'   # 查看操作系统版本
alias ws='getconf LONG_BIT' # 查看系统位数
alias nh='cat /proc/version' # 查看内核版本
alias cpu-v='echo -n "logic cpu num:";  cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c' #  查看CPU信息（型号）
sys()
{
    echo "系统: "; xt
    echo -n "位数: "; ws
    echo -n  "内核: "; nh
    echo -n "CPU: "; cpu-v
}


# 总核数 = 物理CPU个数 X 每颗物理CPU的核数
# 逻辑CPU数 = 物理CPU个数 X 每颗物理CPU的核数 X 超线程数
alias pcpu_n='cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l' # 物理cpu数
cpu_nh()    # 每个物理CPU的核数
{
    echo ${$(cat /proc/cpuinfo| grep "cpu cores"| uniq)//[^0-9]/}
}
alias lcpu_n='cat /proc/cpuinfo| grep "processor"| wc -l'   # 逻辑cpu数

cxc_n() # 超线程数目
{
    echo $((10#$(lcpu_n)/10#$(pcpu_n)/10#$(cpu_nh)))
}
cpu_n()
{
    echo -n "物理CPU数："; pcpu_n
    echo -n "每CPU核数：";cpu_nh
    echo -n "逻辑CPU数：";lcpu_n
    echo -n "超线程数："; cxc_n
}


alias size='du -hd 0' # sl <dir_path>， 查看某个文件、文件夹的大小，<dir_path>缺省则为当前目录
# 数文件/文件夹个数
alias sl='python $myscript/sizelist.py' # sl <dir_path> ,查看某个目录及其下一级所有文件、文件夹的大小，<dir_path>缺省则为当前目录
# sl为size ls之意, <dir_path>缺省则为当前目录
alias count='python $myscript/countfile.py'
# 列出 指定目录下子目录 含有某字符串的 文件/文件夹 的个数
alias cl='python $myscript/countfile.py -lar'
findname() # 按名字查找
{
    if [ $# -lt 2 ]
    then
        echo "Usage: fd <path> <name>"
    else
        argvpath=$1; shift 1
        find $argvpath -name $* 2>&1 | grep -v "Permission denied"
    fi
}

# -------------------- 网络-------------------------
alias nw='hostname -I' # 查看内网ip
# 查看外网ip
ww () {
    local wwip=`curl ifconfig.me`  > /dev/null 2>&1
    echo $wwip
}
# 查看端口
dk()
{
   eval "lsof -i:$1"
}

# sshfs挂载
alias umt='fusermount -u' # 取消sshfs的挂载, umt <本地路径>

# # -------------------- 进程管理 --------------------
# # 搜索进程
alias jch='ps aux | awk 'NR==1'; ps aux | grep -v grep | grep'

# # 按pid杀死进程
alias kpid='kill -9'
# 按jobs的号码杀掉进程
kjob()
{
    for x in $*
    do
        kill %$x
    done
}

# --------------------- 软件 ----------------------
# sub(){
#     if [ -d /Applications/Sublime\ Text.app ]; then
#         # 本地是Mac，且有sublime
#         open -a "/Applications/Sublime Text.app" $*
#     else
#         # 本地非mac，或无sublime
#         echo "\"open sublime on mac client\""
#         sleep 0.1
#         dirs=""
#         for arg in $@; do
#             if [ -f $arg ]; then
#                 # echo "用笔记本上的sublime开文件 $arg"
#                 # 但文件走rsub
#                 rsub $arg
#                 n_file=1
#             elif [ -d $arg ]; then
#                 # echo "用笔记本上的sublime开文件夹: $arg"
#                 dirs="$dirs $(cd $arg; pwd)"
#             else
#                 echo no directory or file $arg
#             fi
#         done
#         if [ "$dirs" != "" ]; then
#             # 文件夹走sftp
#             # 以备iterm2抓取用户、服务器、文件夹路径，从而用远程的sublime sftp开
#             echo "user: $USER; hostname: `hostname`; path: '$dirs'"
#         fi
#     fi
# }

abspath(){
    echo $(cd $(dirname "$1") && pwd -P)/$(basename "$1")
}
sub(){
    if [ -d /Applications/Sublime\ Text.app ]; then
        # 本地是Mac，且有sublime
        open -a "/Applications/Sublime Text.app" $*
    else
        # 所有文件走sshfs，可以开文件夹和文件
        dirs=""
        for arg in $@; do
            if [ -e $arg ]; then
                path_arg=$(abspath $arg)
                dirs="$dirs '$path_arg'"
            else
                echo not exist: $arg
            fi
        done
        if [ "$dirs" != "" ]; then
            echo  "local open app: sub; user: $USER; hostname: `hostname`; path: $dirs"
        fi
    fi
}

if [ "$(uname)" != "Darwin" ]; then
    # 不是mac
    open(){
        dirs=""
        for arg in $@; do
            if [ -e $arg ]; then
                path_arg=$(abspath $arg)
                dirs="$dirs '$path_arg'"
            else
                echo not exist: $arg
            fi
        done
        if [ "$dirs" != "" ]; then
            echo  "local open app: open; user: $USER; hostname: `hostname`; path: $dirs"
        fi
    }
fi
# --------------- alias dotfile ----------------------
# bash
alias vbe='sub ~/.bash_env';        alias sbe='source ~/.bash_env'
alias vbp='sub ~/.profile';         alias sbp='source ~/.profile'
alias vbr='sub ~/.bashrc';          alias sbr='source ~/.bashrc'
alias vba='sub ~/.bash_aliases';    alias vbas='sub ~/.bash_aliases_share';    alias sba='. ~/.bash_aliases';
alias vbo='sub ~/.bash_logout';     alias sbo='source ~/.bash_logout'
# zsh
alias vze='sub ~/.zshenv';          alias sze='. ~/.zshenv'
alias vzp='sub ~/.zprofile';        alias szp='. ~/.zprofile'
alias vzr='sub ~/.zshrc';           alias szr='. ~/.zshrc'
alias vzo='sub ~/.zlogout';         alias szo='. ~/.zlogout'
# others
alias vtmux='sub ~/.tmux.conf';     alias stmux='tmux source-file ~/.tmux.conf'
alias vvim='sub ~/.vimrc'           # vim 免source，重新开vim即生效
alias vgit='sub ~/.gitconfig'
# update dotfiles
alias dotpl='$SHELL ~/.sharedotfile/pulldotfile.sh'
alias dotps='$SHELL ~/.sharedotfile/pushdotfile.sh'

# ---------------- 环境显示 -----------------------
# 显示路径，换行分隔，例如 `showpa PATH`， `showpa <任何一环境变量>`
showpa()
{
    eval "echo \$$1 | sed 's/:/\'$'\n/g'"
}
# 添加路径，例如 `addpa PATH <新路径>`
addpa()
{
    eval "export $1=$2:\$$1"
}
# 删除路径，例如 `addpa PATH <待删除路径>` ，若待删除路径不在$PATH中，则不对$PATH做更改
rmpa()
{
    newpath=$(eval "echo \$$1 | sed 's:$2\:::g' | sed 's:\:$2::g'")
    # 路径有'/'，用'/'分隔会冲突，改用':'分隔
    eval "export $1=$newpath"
}

# ssh
alias vssh='sub ~/.ssh/config';
alias vhost='vim /etc/hosts' # 系统文件，个人账号用sub看不了
alias sshkey='ssh-copy-id'     # 发送公钥


# ---------------- alias cp、scp ----------------

# 拷贝、传输一个文件或文件夹（及其下各级所有文件），包括隐藏文件
alias cp="cp -r"
alias scp="scp -r"

# `cp 目录/.`   拷贝一个目录下所有文件，目录自身不拷贝，拷隐藏文件
# cpu_nder 一个或多个源目录 目标目录
cpu_nder()
{
    sourcepaths=${*:1:$#-1}
    targetpath=${*:$#:1}
    for x in $sourcepaths
    do
        cp $x/. $targetpath
    done

}

# `cp 目录/*`   拷贝一个目录下所有文件，目录自身不拷贝，不拷隐藏文件
# cpseenunder 一个或多个源目录 目标目录
cpseenunder()
{
    sourcepaths=${*:1:$#-1}
    targetpath=${*:$#:1}
    for x in $sourcepaths
    do
        cp $x/* $targetpath
    done
}

# ---------------- alias sys command ----------------
# # some more ls aliases
# alias ll='ls -alFh'
# alias l='ls -CF'
# alias la='l -A'

# -------------------- alias to ls ---------------------

alias tree='tree -N' # -N 原样打印出字符，避免在mac上中文路径乱码

#  -F  文件夹结尾加/
#  -C  多列
#  -A  显示隐藏文件
#  -l  use a long listing format, 即显示所有文件信息，一个文件一行
#  -G  in a long listing, don't print group names
#  -h  文件大用kMG单位
# 显(xxx)隐(.xxx) 文件(xxx)文件夹(xxx/) 用户名 大小 创建日期 大小用GMk格式
alias ll='ls -AlFGh'
# 显(xxx)隐(.xxx) 文件与文件夹不区分(xxx)
alias la='ls -CAGF'
# 显 文件(xxx)文件夹(xxx/)
alias l='ls -CF'



# safe remove
sfrm()
{
    eval "mv -f $* $my/trash"
}
# 安全清空目录，包括隐藏文件（夹）
srunder()
{
    for x in $*
    do
        sfrm $x/{*,.[!.]*}
    done
}
# 直接清空目录，包括隐藏文件（夹）
rmunder()
{
    for x in $*
    do
        if [ -n "$ZSH_VERSION" ]; then  # zsh 下
            rm $x/{*,.*} -rf
        else
        # elif [ -n "$BASH_VERSION" ]; then # bash 下
            rm $x/{*,.[!.]*} -rf
        fi
    done
}

alias md='mkdir'
alias g='grep'
alias lk='ln -s'
# lk <原身路径：可是文件、文件夹> <链接路径与名称>
# 创建软连接
alias ..='cd ../'
c()
{
    if [ $# = 0 ]
    then
        cd $my
    else
        cd $*
    fi
}
# 授权bash文件可执行
alias kzx='chmod +x'  # kzx 文件名： 设为可执行
alias bkzx='chmod -x' # bkzx 文件名：设为不可执行


# 7z压缩
# 用法
#    jy7z xxx.7z(".7z"可省略) 一到若干个文件或文件夹
# 会把文件夹下的所有隐藏和可见文件都压缩到xxx.7z
ys7z()
{
    file7z=$1; shift 1
    filehead=`echo $file7z | sed -E 's/.7z$//g'`
    things_to_be_compressed_and_other_args=$*
    eval "7z a ${filehead}.7z ${things_to_be_compressed_and_other_args}"
}

jy7z()
# 用法
#    jy7z xxx.7z 目标目录(缺省为.)
# 解压到`目标目录/xxx`
{
    file7z=$1; shift 1
    if [ $# -ne 0 ]; then
        target_jieya_path=$1
    else
        target_jieya_path=.
    fi
    filehead=`echo $file7z | sed -E 's/.7z$//g'`
    # `7z x`一次只能解压一个文件
    eval "7z x ${file7z} -o${target_jieya_path}/${filehead}"
}

# 通用解压
alias jy='dtrx'
# 用法：
#     cd到解压路径
#     jy 压缩文件的路径（可以多个）
#     则自动将其解压到同名文件夹

# 更换默认shell
changeshell(){
    which $1 && chsh -s `which $1`
}

# -------------- 删除mac特有隐藏文件 --------------
# 删除 .DS_store 和 ._* 文件
alias macdot_clean='find . \( -type f \( -name "._*" \) -o \( -name ".DS_Store" \) \) -delete'

# ---------------- alias to conda --------------
alias act='source activate'
alias dea='source deactivate'
alias els='conda info -e' # 列出conda的环境
enew() # enew 环境名字 python的版本  其他参数
{
    conda create -n $1 python=$2 ${@:3:$#}
}
ecp() # ecp 源环境名字 新环境名字
{
    conda create -n $2 --clone $1
}
erm() # erm 环境的名字
{
    conda remove -n $1 --all
}

# ---------------- alias to python ------------------
alias py='python'
alias py2='python2'
alias ip='ipython'

# -----------------  alias to tmux ------------------
# list all session of tmux session
alias tl='tmux ls'
# kill a tmux session
alias tk='tmux kill-session -t'
# kill all tmux sessions i.e. kill the tmux server
tka()
{
    answer=$(bash -c "read  -n 1 -p 'Do you want to kill the tmux server? [Y|N]' c; echo \$c")
    echo
    if [ "$answer" = "y" ] || [  "$answer" = "Y"  ]; then
        tmux kill-server
        echo 'killed'
    else
        echo "didn't kill"
    fi
}

#              命令   (i)tm                      (i)tm 已有session名    (i)tm 新session名
# 无tmux session 时   创建名为的default的session    --                   创建session
# 有tmux session 时   attach最近的session         attach该session       创建session
# itm:与iterm2关联的tmux
# tm：不关联iterm2的tmux
itm() {
    if [ $# = 0 ]; then
        tmux -CC attach ||  tmux -CC new -s default
    else
        session=$1
        tmux -CC attach -t ${session} || tmux -CC new -s ${session}
    fi
}
tm() {
    if [ $# = 0 ]; then
        tmux attach ||  tmux new -s default
    else
        session=$1
        tmux attach -t ${session} || tmux new -s ${session}
    fi
}


# ------------------- io function -------------------
# char=`getchar`
getchar()
{
    echo $(bash -c "read -n 1 c; echo \$c")
    echo > /dev/tty
}
# # line=`getline`
# getline()
# {
#     local OLD_IFS=$IFS
#     IFS=''
#     echo $(read -e s; echo $s)
#     IFS=$OLD_IFS
# }


# ------------------ git ----------------------------
# 设置
guser()
{
    # echo "what  to do?  [S]how   [C]onfig"
    # read -n 1 c
    # echo $c
    echo 'what to do?  [S]how  [C]onfig  [X]小号  [D]elete'
    answer=$(bash -c "read  -n 1  c; echo \$c")
    echo
    if [ "$answer" = "S" ] || [ "$answer" = "s" ]; then
        echo 'user.name:' `git config user.name`
        echo 'user.email:' `git config user.email`
    elif [ "$answer" = "C" ] || [ "$answer" = "c" ]; then
        nameuser=$(bash -c "read  -p 'user.name:' c; echo \$c")
        nameemail=$(bash -c "read -p 'user.email:' c; echo \$c")
        git config user.name $nameuser
        git config user.email $nameemail
    elif [ "$answer" = "X" ] || [ "$answer" = "x" ]; then
        git config user.name qqwss
        git config user.email 3269280750@qq.com
    elif [ "$answer" = "D" ] || [ "$answer" = "d" ]; then
        git config --unset  user.name
        git config --unset user.email
    fi
}
# 初创
alias gi='git init'       # 创建.git:    cd 项目文件夹; gi
# 暂存
alias gs='git status'     # 查看当前状态:  gs
alias ga='git add'        # 暂存增改文件:  ga 文件
alias gaa='git add -A .'  # 暂存所有增删改文件：gaa
alias grm='git rm -rf'    # （删除并）暂存删除： grm 文件             ；用于替代rm
alias gmv='git mv'        # （移动并）暂存移动： gmv 文件 文件夹       ；用于替代mv
alias gdf='git diff'      # 改过未add、add了 文件 时，看文件与上次提交的区别：gdf 文件
gum(){
    if [ $# = 0 ]; then
        echo 'Usage: 撤销未暂存的修改. 无法撤销修改先前未跟踪的文件'
        echo ' gum  <filename> [ <filename> [ <filename> ...]]'
        echo ' gum  -all : 所有为暂存的修改'
    elif [ "$1" = "-all" ]; then
        git checkout .
    else
        git checkout -- $*
    fi
}
gua(){
    if [ $# = 0 ]; then
        echo 'Usage: 撤销暂存，对 `git add` `git rm`有效 '
        echo ' gua  <filename> [ <filename> [ <filename> ...]]'
        echo ' gua  -all : 撤销所有暂存'
    elif [ "$1" = "-all" ]; then
        git reset HEAD
    else
        git reset HEAD $*
    fi
}
# 提交
alias gcm='git commit -m'  # 提交：gcm "xxx" [options]
alias gcma='git commit --amend' # 先add，再覆盖上一次提交：gcma，然后弹出文本编辑器，编辑上次提交的说明
gucm() # 直接回到历史版本
{
    if [ $# = 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        echo 'Usage: 恢复到历史版本， alias =`git reset --hard`'
        echo ' gucm 0: 恢复到最近一次git commit后'
        echo ' gucm ^: 恢复到父版本'
        echo ' gucm ^n: 恢复到n父版本'
        echo ' gucm -n: 恢复到HEAD@{n}'
        echo '     `ghs`: 查看所有版本操作的哈希码和HEAD@{n}，如`git commit/reset/revert`'
        echo '            其中 HEAD@{n}: 依时间顺序，倒数第n个版本（当前版本为第0）'
        echo '            例如 `gucm ^` 再 `gucm -1`, 等价于`gucm 0`'
        echo ' `gucm 哈希码/HEAD@{n}/HEAD/HEAD^/HEAD~n`'
        echo '     `glg`: 查看历史版本的的哈希码'
    else
        answer=$(bash -c "read  -n 1 -p '请先git commit再reset，不然抛弃暂存和修改 无法恢复。是否继续reset [Y|N]' c; echo \$c")
        echo
        if [ "$answer" = "y" ] || [  "$answer" = "Y"  ]; then
            target_version=$1
            if [ "$1" = "0" ]; then
                echo git reset --hard HEAD
                git reset --hard HEAD
            elif [ "$1" = "^" ]; then
                echo git reset --hard HEAD^
                git reset --hard HEAD^
            elif [ "${target_version:0:1}" = "^" ]; then
                n=${target_version:1:${#target_version}}
                echo git reset --hard HEAD~$n
                git reset --hard HEAD~$n
            elif [ "${target_version:0:1}" = "-" ]; then
                n=${target_version:1:${#target_version}}
                echo git reset --hard HEAD@{$n}
                git reset --hard HEAD@{$n}
            else
                echo git reset --hard $1
                git reset --hard $1
            fi
        fi
    fi
}
grcm() # 反向提交到某个版本
{
    if [ $# = 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        echo 'Usage: 反向提交返回历史版本， alias = `git revert`'
        echo ' grcm ^: 到上一版本'
        echo ' grcm ^n: 到前n版本'
        echo ' grcm <版本哈希/HEAD^/HEAD~n>: 反向提交若干次，回到上此<版本>，它必需是HEAD的祖宗版本'
        echo ' 若有暂存、修改，则无法执行，需先git commit 或 抛弃暂存、修改（`gucm 0`）'
    else
        target_version=$1
        if [ "${target_version}" = "^" ]; then
            git revert HEAD^..HEAD      # 反向提交一次，回到上一版本
        elif [ "${target_version:0:1}" = "^" ]; then
            n=${target_version:1:${#target_version}}
            git revert HEAD~${n}..HEAD      # 反向提交一次，回到上一版本
        else
            git revert $1..HEAD  # 反向提交若干次，回到$1版本，$1为版本哈希/HEAD^/HEAD~n
        fi
    fi
}
# 分支
gb()                      # 新建分支并检出到此分支： gb 分支名
{
    git branch $1 && git checkout $1
}
alias gbrm='git branch -d' # 删除分支：gbrm 分支名
alias gbls='git branch -avv' # 列出所有本地枝，及其关联的远枝： gbls
alias gch='git checkout'    # 切换分支：gch 分支名/历史提交编号/HEAD^/HEAD/HEAD~n/HEAD@{n}, 要先git commit一次才能gch
alias gmg='git merge'       # 将其与当前枝合并：gmg 待合并分支
# 历史ssssssss
alias glg='git log --graph --decorate --oneline --all'  #列出提交历史图谱，含远仓、本仓
# git log --pretty="%H %an <%ae>"
alias glgs='glg --simplify-by-decoration'               #列出简化历史图谱
alias ghs='git reflog'   # 按时间顺序列出 版本重置（git reset）、提交（git commit）
# 远仓
alias ght='ssh -T git@github.com' # 测试github连接：ght
alias gra='git remote add'        # 关联远仓：gra 远仓名（即远程repo在本地的名字） 远程repo的网址
gha()  # 关联github上的远程repo
# 先在github上建立一个repo
# 然后 gha [[github用户名（默认hyliang96）] 远仓名（默认origin)] github上repo名
{
    if [ $# = 1 ]; then
        user=`git config user.name`
        name=origin
        repo=$1
    elif [ $# = 2 ]; then
        user=`git config user.name`
        name=$1
        repo=$2
        echo 2
    elif [ $# = 3 ]; then
        name=$1
        user=$2
        repo=$3
        echo 3
    fi
    echo $user $name $repo
    git remote add $name git@github.com:$user/$repo.git
}
alias grrm='git remote rm'      # 取关远仓：    grrm 远仓名
alias grrn='git remote rename'  # 重命名远仓：  grrn 远仓名
alias grls='git remote show'    # 列出远仓：    grls
                                # 显示远仓信息： grls 远仓名
# 远枝
alias gup='git branch -u'       # 将当前枝关联远枝：           gup 远仓名 远枝名
alias guu='git branch --unset-upstream' # 将当前枝取关远枝：   guu 远仓名 远枝名
# 推拉
alias gpsu='git push -u'        # 初次推送用，关联远枝并推送，若远仓无此远枝，则创建之：  gpsu 远仓名 远枝名
alias gps='git push'            # 推送当前枝：            gps [ 远仓名 [远枝名]]
alias gfc='git fetch'           # 拉去到当前枝：          gfc [ 远仓名 [远枝名]]
alias gpl='git pull'            # 拉去到当前枝并与之合并：  gpl [ 远仓名 [远枝名]]
                                # gps，gfc，gpl皆可省参数：
                                # 若该远仓的远枝已关联，则[远枝名]不写
                                # 若还只关联一个远仓，则[ 远仓名 [远枝名]]不写
alias gcl='git clone'           # 克隆远枝：gcl 远仓网址
                                # 请用http格式，若用ssh格式则需要验证密钥

gmed()  # 修改提交信息：  gmed <版本id>
#    只接收一个版本id
#    只接收版本hash，不接受HEAD, HEAD^, HEAD@{n}
#    不能是第一个版本
{
    commitid=$1
    GIT_SEQUENCE_EDITOR="sed -i -re 's/^pick ${commitid}/r ${commitid}/'" git rebase -i ${commitid}^
}

gig()   # 修改.gitignore 后，提交一版
{
    git rm -r --cached .  #清除缓存
    git add . #重新trace file
    git commit -m "update .gitignore" #提交和注释
    git push origin master #可选，如果需要同步到remote上的话
}
